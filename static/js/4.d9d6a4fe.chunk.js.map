{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/PostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","postsBlock","posts","item","ava","titleImage","descriptionBlock","Post","props","imgSrc","message","likesCount","id","dellPost","react_default","a","createElement","className","s","src","alt","onClick","type","maxLength30","maxLength","reduxForm","form","onSubmitSuccess","resetForm","_ref","handleSubmit","onSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","React","memo","funcs","Object","objectWithoutProperties","post","map","p","MyPosts_Post_Post","key","MyPosts_PostForm","_ref2","text","addPost","mapDispatchToProps","connect","state","newPostText","profilePage","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","_iterableToArrayLimit","TypeError","_nonIterableRest","ProfileStatus","_useState2","useState","editMode","setEditMode","_useState4","status","setStatus","useEffect","onBlur","updateStatus","autoFocus","onChange","e","target","onDoubleClick","ProfileInfo","profile","contacts","keys","photos","large","small","fullName","ProfileInfo_ProfileStatus","aboutMe","lookingForAJobDescription","Preloader","ProfileInfoContainer","pure","Profile","ProfileInfo_ProfileInfo","MyPosts_MyPosts","ProfileContainer","userId","this","match","params","_this$props","authorizedUserId","isAuth","history","getUserProfile","getStatus","components_Profile_Profile","Component","compose","auth","withRouter"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,WAAA,4BAAAC,MAAA,6CCAlBH,EAAAC,QAAA,CAAkBG,KAAA,yCCAlBJ,EAAAC,QAAA,CAAkBI,IAAA,yBAAAC,WAAA,gCAAAC,iBAAA,yNC8BHC,EA5BF,SAACC,GAAU,IAEpBC,EAEED,EAFFC,OAAQC,EAENF,EAFME,QAASC,EAEfH,EAFeG,WACjBC,EACEJ,EADFI,GAAIC,EACFL,EADEK,SAEN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEf,MAChBW,EAAAC,EAAAC,cAAA,OAAKG,IAAKV,EAAQW,IAAI,QACrBV,EACDI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBACC,IACAL,GAEHG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEJ,GAAIA,EACJS,QAAS,WAAQR,EAASD,IAC1BK,UAAU,wBACVK,KAAK,UAEJ,2FClBLC,EAAcC,YAAU,IAyBfC,cAAU,CAAEC,KAAM,OAAQC,gBAAiBC,YAAU,SAArDH,CAvBE,SAAAI,GAAA,IAAGC,EAAHD,EAAGC,aAAH,OACfhB,EAAAC,EAAAC,cAAA,QAAMe,SAAUD,GACdhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACEC,KAAK,OACLC,UAAWC,IACXlB,UAAU,gCACVK,KAAK,OACLc,YAAY,4EACZC,SAAU,CAACC,IAAUf,MAGzBT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEC,UAAU,kBACVK,KAAK,UAEJ,iFClBHiB,EAAUC,IAAMC,KAAK,SAAAZ,GAAyB,IAAtB3B,EAAsB2B,EAAtB3B,MAAUwC,EAAYC,OAAAC,EAAA,EAAAD,CAAAd,EAAA,WAC5CgB,EAAO3C,EAAM4C,IAAI,SAAAC,GAAC,OACtBjC,EAAAC,EAAAC,cAACgC,EAAD,CACEC,IAAKF,EAAEnC,GACPA,GAAImC,EAAEnC,GACNF,QAASqC,EAAErC,QACXC,WAAYoC,EAAEpC,WACdF,OAAQsC,EAAEtC,OACVI,SAAU6B,EAAM7B,aAOpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEjB,YAChBa,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACkC,EAAD,CAAUnB,SANG,SAAAoB,GAAc,IAAXC,EAAWD,EAAXC,KAClBV,EAAMW,QAAQD,MAMZtC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEhB,OACf2C,MAWHS,EAAqB,CAAED,YAASxC,cAEvB0C,cAPS,SAAAC,GAAK,MAAK,CAChCC,YAAaD,EAAME,YAAYD,YAC/BvD,MAAOsD,EAAME,YAAYxD,QAKaoD,EAAzBC,CAA6ChB,6BCrC7C,SAAAoB,EAAAC,EAAAC,GACf,OCJe,SAAAD,GACf,GAAAE,MAAAC,QAAAH,GAAA,OAAAA,EDGSI,CAAcJ,IEJR,SAAAA,EAAAC,GACf,IAAAI,EAAA,GACAC,GAAA,EACAC,GAAA,EACAC,OAAAC,EAEA,IACA,QAAAC,EAAAC,EAAAX,EAAAY,OAAAC,cAA6CP,GAAAI,EAAAC,EAAAG,QAAAC,QAC7CV,EAAAW,KAAAN,EAAAO,QAEAhB,GAAAI,EAAAa,SAAAjB,GAH4EK,GAAA,IAKzE,MAAAa,GACHZ,GAAA,EACAC,EAAAW,EACG,QACH,IACAb,GAAA,MAAAK,EAAA,QAAAA,EAAA,SACK,QACL,GAAAJ,EAAA,MAAAC,GAIA,OAAAH,EFnBgCe,CAAoBpB,EAAAC,IGJrC,WACf,UAAAoB,UAAA,wDHGgEC,GIFhE,IAuCeC,EAvCO,SAAC3E,GAAU,IAAA4E,EAAAzB,EAEC0B,oBAAS,GAFV,GAExBC,EAFwBF,EAAA,GAEdG,EAFcH,EAAA,GAAAI,EAAA7B,EAGH0B,mBAAS7E,EAAMiF,QAHZ,GAGxBA,EAHwBD,EAAA,GAGhBE,EAHgBF,EAAA,GAK/BG,oBAAU,WACRD,EAAUlF,EAAMiF,SACf,CAACjF,EAAMiF,SAgBV,OACE3E,EAAAC,EAAAC,cAAA,WAEKsE,EAEGxE,EAAAC,EAAAC,cAAA,SACA4E,OAfiB,WACzBL,GAAY,GACZ/E,EAAMqF,aAAaJ,IAcXZ,MAAOY,EACPK,WAAS,EACTC,SAba,SAAAC,GACrBN,EAAUM,EAAEC,OAAOpB,UAOX/D,EAAAC,EAAAC,cAAA,QAAMkF,cAjBS,WACvBX,GAAY,KAgBoCE,GAAU,8CCtBxDU,EAAc3D,IAAMC,KAAK,SAAAZ,GAAmC,IAAhCuE,EAAgCvE,EAAhCuE,QAASX,EAAuB5D,EAAvB4D,OAAW/C,EAAYC,OAAAC,EAAA,EAAAD,CAAAd,EAAA,sBAC1DwE,EAAW1D,OAAO2D,KAAKF,EAAQC,UAClCvD,IACC,SAAAG,GAAG,OACDmD,EAAQC,SAASpD,GACbnC,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,SAAIiC,EAAJ,MAAemD,EAAQC,SAASpD,IACnC,OAGV,OAAKmD,EAEHtF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEG,IAAKiF,EAAQG,OAAOC,MACpBvF,UAAWC,IAAEb,WACbe,IAAI,SAGRN,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEZ,kBAChBQ,EAAAC,EAAAC,cAAA,OACEG,IAAKiF,EAAQG,OAAOE,MACpBxF,UAAWC,IAAEd,IACbgB,IAAI,QAELgF,EAAQM,SAAW5F,EAAAC,EAAAC,cAAA,cAASoF,EAAQM,UAAqB,KAC1D5F,EAAAC,EAAAC,cAAC2F,EAAD,CAAelB,OAAQA,EAAQI,aAAcnD,EAAMmD,eAClDO,EAAQQ,QAEL9F,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,oDACCoF,EAAQQ,SAGX,KACHP,EACAD,EAAQS,0BAEL/F,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,mDACCoF,EAAQS,2BAGX,OAlCW/F,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,QA8CjBxD,EAAqB,CACzBuC,kBAKakB,EAFcxD,YATL,SAAAC,GAAK,MAAK,CAChC4C,QAAS5C,EAAME,YAAY0C,QAC3BX,OAAQjC,EAAME,YAAY+B,SAO0BnC,EAAoB,KAAM,CAAE0D,MAAM,GAA3DzD,CAAoE4C,GCvDlFc,EAPC,kBACdnG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkG,EAAD,MACApG,EAAAC,EAAAC,cAACmG,EAAD,QCAEC,8LACgB,IACZC,EAAWC,KAAK9G,MAAM+G,MAAMC,OAA5BH,OADYI,EAEmBH,KAAK9G,MAAlCkH,EAFUD,EAEVC,iBAFUD,EAEQE,OACrBN,IACHA,EAASK,IAEPJ,KAAK9G,MAAMoH,QAAQhD,KAAK,UAE5B0C,KAAK9G,MAAMqH,eAAeR,GAC1BC,KAAK9G,MAAMsH,UAAUT,oCAGZ,OAAOvG,EAAAC,EAAAC,cAAC+G,EAAYT,KAAK9G,cAbPgC,IAAMwF,WAqB/B1E,EAAqB,CAAEuE,mBAAgBC,eAE9BG,sBACb1E,YARsB,SAAAC,GAAK,MAAK,CAChCkE,iBAAkBlE,EAAM0E,KAAKtH,GAC7B+G,OAAQnE,EAAM0E,KAAKP,SAMMrE,EAAoB,KAAM,CAAE0D,MAAM,IAC3DmB,IAFaF,CAGbb","file":"static/js/4.d9d6a4fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1bCF3\",\"posts\":\"MyPosts_posts__1f6j_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1Cuze\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ava\":\"ProfileInfo_ava__38jvf\",\"titleImage\":\"ProfileInfo_titleImage__3KFO9\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1hvD_\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n  const {\r\n    imgSrc, message, likesCount,\r\n    id, dellPost,\r\n  } = props\r\n  return (\r\n    <div className={s.item}>\r\n      <img src={imgSrc} alt=\"...\" />\r\n      {message}\r\n      <div>\r\n        <span>Like</span>\r\n        {' '}\r\n        {likesCount}\r\n      </div>\r\n      <div>\r\n        <button\r\n          id={id}\r\n          onClick={() => { dellPost(id) }}\r\n          className=\"btn btn-danger btn-sm\"\r\n          type=\"button\"\r\n        >\r\n          {'Удалить'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { required, maxLength } from '../../../utils/validators/validators'\r\nimport { Textarea } from '../../common/FormsControls/FormsControls'\r\nimport { resetForm } from '../../../utils/helpers/resetFormAfterSubmit'\r\n\r\nconst maxLength30 = maxLength(30)\r\n\r\nconst PostForm = ({ handleSubmit }) => (\r\n  <form onSubmit={handleSubmit}>\r\n    <div className=\"md-form\">\r\n      <Field\r\n        name=\"text\"\r\n        component={Textarea}\r\n        className=\"md-textarea form-control mb-3\"\r\n        type=\"text\"\r\n        placeholder=\"Введите текст\"\r\n        validate={[required, maxLength30]}\r\n      />\r\n    </div>\r\n    <div>\r\n      <button\r\n        className=\"btn btn-success\"\r\n        type=\"submit\"\r\n      >\r\n        {'Добавить пост'}\r\n      </button>\r\n    </div>\r\n  </form>\r\n)\r\n\r\nexport default reduxForm({ form: 'post', onSubmitSuccess: resetForm('post') })(PostForm)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addPost, dellPost } from '../../../redux/profile-reducer'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport PostForm from './PostForm'\r\n\r\nconst MyPosts = React.memo(({ posts, ...funcs }) => {\r\n  const post = posts.map(p => (\r\n    <Post\r\n      key={p.id}\r\n      id={p.id}\r\n      message={p.message}\r\n      likesCount={p.likesCount}\r\n      imgSrc={p.imgSrc}\r\n      dellPost={funcs.dellPost}\r\n    />\r\n  ))\r\n\r\n  const onSubmit = ({ text }) => {\r\n    funcs.addPost(text)\r\n  }\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My post</h3>\r\n      <PostForm onSubmit={onSubmit} />\r\n      <div className={s.posts}>\r\n        {post}\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nconst mapStateToProps = state => ({\r\n  newPostText: state.profilePage.newPostText,\r\n  posts: state.profilePage.posts,\r\n})\r\n\r\nconst mapDispatchToProps = { addPost, dellPost }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React, { useState, useEffect } from 'react'\r\n\r\nconst ProfileStatus = (props) => {\r\n\r\n  const [editMode, setEditMode] = useState(false)\r\n  const [status, setStatus] = useState(props.status)\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  }, [props.status])\r\n\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateStatus(status)\r\n  }\r\n\r\n  const onStatusChange = e => {\r\n    setStatus(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        !editMode\r\n          ? <span onDoubleClick={activateEditMode}>{status || 'Please click twice to change your status'}</span>\r\n          : <input\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n            autoFocus\r\n            onChange={onStatusChange}\r\n          />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileStatus\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { updateStatus } from '../../../redux/profile-reducer'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatus from './ProfileStatus'\r\n\r\nconst ProfileInfo = React.memo(({ profile, status, ...funcs }) => {\r\n  const contacts = Object.keys(profile.contacts)\r\n    .map(\r\n      key => (\r\n        profile.contacts[key]\r\n          ? <p><b>{key}: </b>{profile.contacts[key]}</p>\r\n          : null\r\n      )\r\n    )\r\n  if (!profile) return <Preloader />\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img\r\n          src={profile.photos.large}\r\n          className={s.titleImage}\r\n          alt=\"...\"\r\n        />\r\n      </div>\r\n      <div className={s.descriptionBlock}>\r\n        <img\r\n          src={profile.photos.small}\r\n          className={s.ava}\r\n          alt=\"...\"\r\n        />\r\n        {profile.fullName ? <strong>{profile.fullName}</strong> : null}\r\n        <ProfileStatus status={status} updateStatus={funcs.updateStatus} />\r\n        {profile.aboutMe\r\n          ? (\r\n            <p>\r\n              <b>Обо мне: </b>\r\n              {profile.aboutMe}\r\n            </p>\r\n          )\r\n          : null}\r\n        {contacts}\r\n        {profile.lookingForAJobDescription\r\n          ? (\r\n            <p>\r\n              <b>Работа: </b>\r\n              {profile.lookingForAJobDescription}\r\n            </p>\r\n          )\r\n          : null\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nconst mapStateToProps = state => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  updateStatus,\r\n}\r\n\r\nconst ProfileInfoContainer = connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(ProfileInfo)\r\n\r\nexport default ProfileInfoContainer\r\n","import React from 'react'\r\nimport MyPosts from './MyPosts/MyPosts'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\n\r\nconst Profile = () => (\r\n  <div>\r\n    <ProfileInfo />\r\n    <MyPosts />\r\n  </div>\r\n)\r\n\r\nexport default Profile\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport Profile from './Profile'\r\nimport { getUserProfile, getStatus } from '../../redux/profile-reducer'\r\n\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n    let { userId } = this.props.match.params\r\n    const { authorizedUserId, isAuth } = this.props\r\n    if (!userId) {\r\n      userId = authorizedUserId\r\n      if (!userId)\r\n        this.props.history.push('/login')\r\n    }\r\n    this.props.getUserProfile(userId)\r\n    this.props.getStatus(userId)\r\n  }\r\n\r\n  render() { return <Profile {...this.props} /> }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  authorizedUserId: state.auth.id,\r\n  isAuth: state.auth.isAuth,\r\n})\r\n\r\nconst mapDispatchToProps = { getUserProfile, getStatus }\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps, null, { pure: false }),\r\n  withRouter\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}